name: >-
  container-dev_env_fed2bc2d-2e09-42a6-9b93-e386e63a9229_app_8fb6b052-179c-4545-9784-ae96a3645812
  Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - master
    paths: []
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_fc569075-2e28-48ba-8e07-7fbfa5a924be
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.SAMERAKUBECONRUBIKCHALLENGE_ENV_FED2BC2D2E0942A69B93E386E63A9229_APP_8FB6B052179C45459784AE96A3645812_CONTAINERDEV_ENV_FED2BC2D2E0942A69B93E386E63A9229_APP_8FB6B052179C45459784AE96A3645812_YAML}}
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  IMAGE_NAME: 094608315651.dkr.ecr.us-east-1.amazonaws.com/sameerademokubecon1
  DOCKER_FILE_PATH: Dockerfile
  DOCKER_BUILD_CONTEXT: .
  SCAN_SEVERITY: CRITICAL
  TRIVY_SCAN_EXIT_CODE: '0'
  TRIVY_RESULT_FORMAT: sarif
  REPOSITORY_NAME: sameerademokubecon1
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions: write-all
    strategy:
      fail-fast: false
    steps:
      - name: 'Run :: Checkout repository for CodeQL'
        uses: actions/checkout@v4
      - name: 'Run :: Decoding Secrets e77f667f-b316-4267-9956-6da01b46d8e4'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: 'Run :: Autobuild for CodeQL'
        uses: github/codeql-action/autobuild@v3
      - name: 'Run :: Perform CodeQL Analysis'
        id: codeql-analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: /language:${{matrix.language}}
      - name: 'Run :: Print & Upload CodeQL Report'
        run: |2-

                  SARIF_FILE=$(find "${{ steps.codeql-analysis.outputs.sarif-output }}" -name '*.sarif' -type f)
                  if [ -n "$SARIF_FILE" ]; then
                      echo "CodeQL Results"
                      cat "$SARIF_FILE" > ${{ env.IMAGE_TAG }}-codeql-result.sarif

                      echo "Uploading CodeQL Results to S3 :: ${{ env.IMAGE_TAG }}-codeql-result.sarif"
                      # Uploading Minified Trivy Resuls
                          response=$(curl -X POST ${{ env.S3_UPLOAD_ENDPOINT }} -H "Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}" -H "x-auth-by: sa" -H "x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}" -H "x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}" -H "x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}" -H "x-resource-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}" -H "Content-Type: multipart/form-data" -F "file=@${{ env.IMAGE_TAG }}-codeql-result.sarif" -F "provider=aws" -F "resourceType=codeql-report" -F "cloudStoragePath=/${{ env.DEPLOYMENT_APPLICATION_ID }}/codeql_results/")
                          if echo "$response" | grep -q '"success":true'; then
                            echo "SUCCESS :: $response"
                          else
                            echo "FAILED :: $response"
                          fi
                  else
                      echo "SARIF file not found."
                  fi
  _status-pending:
    name: _status Pending
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets f1b5d15b-4f1f-40bb-aecb-81964b152b89'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/PENDING')
                
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  _release-info:
    name: _release Info
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets ff67f522-c7d8-41ca-973d-b7fde1c07ddf'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Release
        run: |2-

                echo "Pipeline Release Information"
                echo "////////////////////////////"
                echo "Release ID  : github.event.client_payload.releaseData.releaseId"
                echo "Pipeline ID : github.event.client_payload.releaseData.pipelineId"
                echo "App ID      : github.event.client_payload.releaseData.appId"
              
  build-and-push:
    name: Build And Push
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      stepsCanProceed: ${{ env.STEPS_CAN_PROCEED }}
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets 2e598487-cd8b-4c0c-a7a1-b3973c81f552'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials ddc19603-00d8-4154-ad7e-2ab7b5cb6f01'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Login to Amazon ECR'
        id: skyu-login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.IMAGE_NAME }}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f
          ${{env.DOCKER_FILE_PATH}} ${{env.DOCKER_BUILD_CONTEXT}}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: ${{env.TRIVY_RESULT_FORMAT}}
          output: ${{ env.IMAGE_TAG }}-trivy-result.json
          exit-code: ${{env.TRIVY_SCAN_EXIT_CODE}}
          vuln-type: os,library
          severity: ${{env.SCAN_SEVERITY}}
          hide-progress: true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Evaluate Trivy Results'
        run: |2-

              # Minifying Json
              jq -c '.' ${{ env.IMAGE_TAG }}-trivy-result.json > ${{ env.IMAGE_TAG }}-trivy-result.min.json
              trivy_result=$(cat "${{ env.IMAGE_TAG }}-trivy-result.min.json")

              # Set the desired severity level
              desiredSeverity="${{ env.SCAN_SEVERITY }}"
              IFS=',' read -ra severities <<< "$desiredSeverity"  # Split the severity string

              # Print the tags array for debugging
              jq '.runs[0].tool.driver.rules[].properties.tags' "${{ env.IMAGE_TAG }}-trivy-result.json"

              VULNERABILITY_COUNT=0

              for severity in "${severities[@]}"; do
                count=$(jq --arg severity "$severity" '.runs[0].tool.driver.rules | map(select(.properties.tags and (.properties.tags | map(tostring) | index($severity) // empty))) | length' "${{ env.IMAGE_TAG }}-trivy-result.json")
                echo "Number of $severity vulnerabilities: $count"
                VULNERABILITY_COUNT=$((VULNERABILITY_COUNT + count))
              done

              echo "Total Number of vulnerabilities: $VULNERABILITY_COUNT"

              if [ "$VULNERABILITY_COUNT" -gt 0 ]; then
                echo "STEPS_CAN_PROCEED=false" >> $GITHUB_ENV
                echo "VULNERABILITY_COUNT=$VULNERABILITY_COUNT" >> $GITHUB_ENV
              fi
              echo "ARE_TRIVY_RESULTS_EVALUATED=true" >> $GITHUB_ENV
              
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Upload Trivy Result To S3'
        run: |2-


              # Minifying Json
              jq -c '.' ${{ env.IMAGE_TAG }}-trivy-result.json > ${{ env.IMAGE_TAG }}-trivy-result.min.json

              # Uploading Minified Trivy Resuls
              response=$(curl -X POST ${{ env.S3_UPLOAD_ENDPOINT }} -H "Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}" -H "x-auth-by: sa" -H "x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}" -H "x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}" -H "x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}" -H "x-resource-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}" -H "Content-Type: multipart/form-data" -F "file=@${{ env.IMAGE_TAG }}-trivy-result.min.json" -F "provider=aws" -F "resourceType=trivy-report" -F "cloudStoragePath=/${{ env.DEPLOYMENT_APPLICATION_ID }}/trivy_results/")

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
        if: ${{ env.ARE_TRIVY_RESULTS_EVALUATED == 'true' }}
      - name: 'Run :: Check Pipeline Safety'
        run: |2-

              if [ "${{ env.VULNERABILITY_COUNT }}" -gt 0 ]; then
                echo "UN-SAFE to continue Pipeline"
                exit 1
              else
                echo "SAFE to continue Pipeline"
              fi
              
      - name: 'Run :: Create Repository'
        run: >-
          aws ecr create-repository --repository-name ${{ env.REPOSITORY_NAME }}
          || true
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
      - name: 'Run :: Build, tag, and push image'
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        if: ${{ env.STEPS_CAN_PROCEED == 'true' }}
  _status-success:
    name: _status Success
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets 13c9b881-af58-4ab5-8254-c391edf46518'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/SUCCESS')
                
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets ec140fbb-bca8-4b72-873e-263a5e21e0ac'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

                response=$(curl -X PUT -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.API_GATEWAY_BASEURL }}/pipeline-service/${{ env.PIPELINE_ID }}/FAILED')
                
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                fi
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-and-push
    if: >-
      needs.build-and-push.outputs.stepsCanProceed == 'true' && ${{
      !github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets 40269870-c4fa-47e3-a8b5-19d209862c82'
        run: |2-

                  if [ ! -x "$(command -v jq)" ]; then
                    echo "jq not found, installing..."
                    sudo apt-get update
                    sudo apt-get install -y jq
                  fi
                  echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "appType=Deployment&imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' '${{ env.DEPLOYMENT_ENDPOINT }}')
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
